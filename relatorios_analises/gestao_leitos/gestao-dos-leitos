from datetime import datetime
import asyncio
import os
import json

class paciente:
    def __init__(self, nome, idade, sexo, historico, contato, gravidade, ingresso, horario, id_paciente, limiteVisitantes, condicao_diagnostico,leito ):
        self.nome = nome
        self.idade = idade
        self.sexo = sexo
        self.historico = historico
        self.contato = contato
        self.gravidade = gravidade
        self.ingresso = ingresso
        self.id_paciente = id_paciente
        self.limiteVisitantes = limiteVisitantes 
        self.condicao_diagnostico = condicao_diagnostico
        self.horario = horario

        
class Ala:
    def __init__(self,tipo_ala,num_leito):
        #numero de leitos em cada ala
        self.num_leito = num_leito
        #que tipo de ala o paciente vai ficar 
        self.tipo_ala = tipo_ala
        #cria uma lista de leitos
        self.leitos = []
        #criar uma lista de histotico
        self.historico_ocupacao = []
        for num in range(1,num_leito + 1):
            self.leitos.append({
                'tipo_ala' : self.tipo_ala,
                'numero_do_leito': num,
                'status':'livre',
                'IDpaciente': None
                })
            
            
    def verificar_ala_quase_cheia(self, percent_limite=80):
        ocupados = 0
        for leito in self.leitos:
            if leito['status'] == 'ocupado':
                ocupados += 1
        capacidade = len(self.leitos)
        percent_ocupacao = (ocupados / capacidade) * 100
        if percent_ocupacao >= percent_limite:
            print(f"A ala {self.tipo_ala} está se aproximando da capacidade máxima.\n Ocupação atual: {percent_ocupacao}%")
            
    def calcular_estatisticas_com_arquivo(self):
        ocupados = 0
        livres = 0
        try:
            with open(f'{self.tipo_ala}_historico.txt', 'r') as arquivo:
                for linha in arquivo:
                    dados = linha.strip().split(' , ')
                    if len(dados) == 5:
                        status = dados[2]
                        if status == 'ocupado':
                            ocupados += 1
                        elif status == 'disponivel':
                            livres += 1
        except FileNotFoundError:
            print(f"Arquivo de histórico de ocupação da ala {self.tipo_ala} não encontrado.")

        capacidade = len(self.leitos)
        percentual_ocupacao = (ocupados / capacidade) * 100
        print(f"Relatório da Ala {self.tipo_ala}:")
        print(f"Leitos ocupados: {ocupados}")
        print(f"Leitos livres: {livres}")
        print(f"Taxa de ocupação: {percentual_ocupacao:.2f}%")
        print()
     
    async def verificar_ala_tempreal(self, percent_limite=80):
        while True:
            ocupados = sum(1 for leito in self.leitos if leito['status'] == 'ocupado')
            capacidade = len(self.leitos)
            percentual_ocupacao = (ocupados / capacidade) * 100

            if percentual_ocupacao >= percent_limite:
                print(f"A ala {self.tipo_ala} está se aproximando da capacidade máxima. Ocupação atual: {percentual_ocupacao}%")
                
            await asyncio.sleep(60)
            
    def ler_historico_ocupacao(self):
        historico = []  # Lista para armazenar os registros lidos
        try:
            with open(f'{self.tipo_ala}_historico.txt', 'r') as arquivo:
                for linha in arquivo:
                    dados = linha.strip().split(', ')
                    if len(dados) == 5:
                        registro = {
                            'tipo_ala': dados[0],
                            'numero_do_leito': int(dados[1]),
                            'status': dados[2],
                            'IDpaciente': int(dados[3]),
                            'tempo': datetime.strptime(dados[4], '%Y-%m-%d %H:%M:%S.%f')
                        }
                        historico.append(registro)
        except FileNotFoundError:
            print(f"Arquivo de histórico de ocupação da ala {self.tipo_ala} não encontrado.")
        return historico 
        
    def registrar_leito(self,tipo_ala,num_leito):
        with open(f'{self.tipo_ala}_historico.txt', 'w') as arquivo:
            for registro in self.historico_ocupacao:
               arquivo.write(f"{registro['numero_do_leito']} , {registro['status']} , {registro['IDpaciente']} , {registro['tempo']}\n")
               
    def arquivar_historico(self):
        try:
            with open(f'{self.tipo_ala}_historico.txt', 'w') as arquivo:
                for registro in self.historico_ocupacao:
                    arquivo.write(f"{registro['tipo_ala']}, {registro['numero_do_leito']}, {registro['status']}, {registro['IDpaciente']}, {registro['tempo']}\n")
        except Exception as e:
            print(f"Erro ao arquivar o histórico: {e}")
        
        
    def ocupar_leito(self,tipo_ala):
        
        if self.
        with open(f'{tipo_ala}_historico.txt','w') as arquivo:
        
             
    #def ocupar_leito(self,tipo_ala,id_paciente,gravidade):
    #    for leito  in self.leitos:
    #     if leito['status'] == 'livre':
    #        if gravidade == 'grave':
    #            if leito['tipo_ala'] == 'UTI':
    #                leito['status'] = 'ocupado'
    #                leito['IDpaciente'] = id_paciente
    #                self.verificar_ala_tempreal
    #                print(f" O leito {leito['numero_do_leito']} esta ocupado pelo paciente {id_paciente}")
    #                self.registrar_leito(tipo_ala,leito['numero_do_leito']) # type: ignore
    #                break
    #            if leito['tipo_ala'] == "ala1" or leito['tipo_ala'] == "ala2":
    #                print(f"Paciente como id {id_paciente} deve ser alojado na ala UTI ao invés de outra ala. \n tentar novamente.")
    #        elif gravidade == 'pouco grave' or 'leve': 
    #            if leito['tipo_ala'] == "ala1":
    #                leito['status'] = 'ocupado'
    #                leito['IDpaciente'] = id_paciente
    #                leito['tempo'] = datetime.now()
    #                print(f" O leito {leito['numero_do_leito']} esta ocupado pelo paciente {id_paciente}")
    #                self.registrar_leito(tipo_ala,leito['numero_do_leito'])
    #                break
    #            elif leito['tipo_ala'] == "ala2":
    #                leito['status'] = 'ocupado'
    #                leito['IDpaciente'] = id_paciente
    #                leito['tempo'] = datetime.now()
    #                print(f" O leito {leito['numero_do_leito']} esta ocupado pelo paciente {id_paciente}")
    #                self.registrar_leito(tipo_ala,leito['numero_do_leito'])
    #                break
    #    self.verificar_ala_quase_cheia()
    #        
    #
    def liberar_leito(self, num_leito):
        leito_encontrado = None
        for leito in self.leitos:
            if leito['numero_do_leito'] == num_leito and leito['status'] == "ocupado":
                leito_encontrado = leito
                break

        if leito_encontrado is not None:
            leito_encontrado['status'] = "disponivel"
            leito_encontrado['IDpaciente'] = None
            leito_encontrado['tempo'] = datetime.now()
            print(f"Leito {num_leito} foi liberado.")

            # Registre a ação de liberação no histórico
            self.registrar_leito(self.tipo_ala, num_leito)

            # Atualize o arquivo de histórico
            with open(f'{self.tipo_ala}_historico.txt', 'a') as arquivo:
                 arquivo.write(f"{self.tipo_ala},{num_leito},disponivel,None,{leito_encontrado['tempo']}\n")
        else:
            print(f"Leito {num_leito} não pode ser liberado ou já está disponível.")
        self.verificar_ala_quase_cheia()
        
        
def main():
    #teste de alas 
    uti = Ala('UTI', 10)
    ala1 = Ala('ala1', 15)
    ala2 = Ala('ala2', 20)
    while True:
        print("-----menu de gestão de leitos-----")
        print("Escolha uma opção:")
        print("[1] Ocupar leito")
        print("[2] Liberar leito")
        print("[3] ler histórico de ocupação")
        print("[4] acessar relatórios de ocupação")
        print("[5] Sair")
        escolha = int(input("Opção: "))
        if escolha == 1:
        #tipo_ala, paciente
            ala = input("Insira o nome da ala [ala1,ala2,UTI]: ")
            id_p = input("Insira o ID do paciente: ")
            grav = input("Insira a gravidade do paciente: ")
            if ala == 'UTI':
                uti.ocupar_leito(ala,id_p,grav)
                uti.arquivar_historico()
            elif ala == 'ala1':
                ala1.ocupar_leito(ala,id_p,grav)
                ala1.arquivar_historico()
            elif ala == 'ala2':
                ala2.ocupar_leito(ala,id_p,grav)
                ala2.arquivar_historico()
                
        elif escolha == 2:
            ala = input("Insira o nome da ala [ala1,ala2,UTI]: ")
            num_leito = int(input("Insira o numero do leito a ser liberado"))
            if ala == 'UTI':
                uti.liberar_leito(num_leito)
                uti.arquivar_historico()
            elif ala == 'ala1':
                ala1.liberar_leito(num_leito)
                ala1.arquivar_historico()
            elif ala == 'ala2':
                ala2.liberar_leito(num_leito)
                ala2.arquivar_historico()
                
        elif escolha == 3:
            ala = input("Insira o nome da ala [ala1,ala2,UTI]: ")
            if ala == 'UTI':
                  histuti = uti.ler_historico_ocupacao()
                  print("historico de ocupação da UTI: ")
                  for registro in histuti:
                      print(registro)
                      
            elif ala == 'ala1':
                histala1 = ala1.ler_historico_ocupacao()
                print("historico de ocupação da ala 1: ")
                for registro in histala1:
                    print(registro)
                    
            elif ala == 'ala2':
                histala2 = ala2.ler_historico_ocupacao()
                print("historico de ocupação da ala 2")
                for registro in histala2:
                    print(registro)
                    
        elif escolha == 4:
             for ala in [uti, ala1, ala2]:
                ala.calcular_estatisticas_com_arquivo()               
                    
        elif escolha == 5:
            break
                
                
                 
main()